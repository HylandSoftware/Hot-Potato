openapi: 3.0.1
info:
  title: Workflow REST API
  version: 1.0.0-draft1
  description: |-
    Feature documentation:
     - [Task Execution](features/TaskExecution.md)
     - [Work Items / FIQL Usage](features/WorkItems_FIQL.md)
  contact:
    name: Workflow
    email: GRP-WorkflowDevelopers@hyland.com
  x-api-product:
    program: Solution Building and CCM
    name: Workflow
servers:
  - url: '{server}/workflow'
    variables:
      server:
        default: https://api.hyland.com
        description: |-
          This is the server being used to host the API in the current environment.

# Apply security to all APIs
security:
  - Bearer: []

#--------------------------------------------------------------------------------
# Paths
#--------------------------------------------------------------------------------
paths:
  /life-cycles:
    get:
      summary: |-
        Gets a list of life cycles.
      description: |-
        Gets a list of life cycles the user has rights to access in a client.
      tags:
        - Life Cycles
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifeCycleCollectionModel'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403LicenseNotAvailable'

  /life-cycles/{lifeCycleId}:
    get:
      summary: |-
        Gets the information about the specified life cycle.
      tags:
       - Life Cycles
      parameters:
        - $ref: '#/components/parameters/lifeCycleIdPathParam'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifeCycleModel'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403LicenseNotAvailable'
        404:
          description: |-
            Response when the life cycle does not exist, or the user does not have rights
            to the life cycle.

  /queues:
    get:
      summary: |-
        Gets a list of queues.
      description: |-
        Gets a list of queues the user has rights to.
      tags:
        - Queues
      parameters:
        - in: query
          name: lifeCycleId
          schema:
            type: string
          description: |-
            If specified only the queues the user has rights to and that are in the specified
            life cycle are returned.   The queues will be returned in the display order as
            configured in the life cycle.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueCollectionModel'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403LicenseNotAvailable'

  /queues/{queueId}:
    get:
      summary: |-
        Gets the information about the specified queue.
      tags:
       - Queues
      parameters:
        - $ref: '#/components/parameters/queueIdPathParam'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueModel'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403LicenseNotAvailable'
        404:
          description: |-
            Response when the queue does not exist, or the user does not have rights
            to the queue.

  /ad-hoc-tasks:
    get:
      summary: |-
        Gets a list of ad hoc tasks.
      description: |-
        Gets a list of ad hoc tasks the user has rights to.
      tags:
       - Tasks
      parameters:
        - in: query
          name: queueId
          schema:
            type: string
          description: |-
            If specified only the ad hoc tasks the user has rights to and that are in
            the queue are returned.  The ad hoc tasks will be returned in the display order
            as configured in the queue.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdHocTaskCollectionModel'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403LicenseNotAvailable'

  /ad-hoc-tasks/{adhocTaskId}:
    get:
      summary: |-
        Gets the information about an ad hoc task.
      tags:
       - Tasks
      parameters:
        - $ref: '#/components/parameters/adhocTaskIdPathParam'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdHocTaskModel'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403LicenseNotAvailable'
        404:
          description: |-
            Response when the ad hoc task does not exist, or the user does not have rights
            to the ad hoc task.

  /ad-hoc-tasks/{adhocTaskId}/execute:
    post:
      summary: |-
        Executes an ad hoc task.
      tags:
       - Tasks
      parameters:
        - $ref: '#/components/parameters/adhocTaskIdPathParam'
        - in: query
          name: queueId
          schema:
            type: string
          required: true
          description: ID of queue containing the ad hoc task.
      requestBody:
        description: Contains information required to execute the ad hoc task.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteTaskModel'
      responses:
        201:
          $ref: '#/components/responses/201TaskHasBeenScheduledForExecution'
        400:
          description: |-
            Response when the client specifies an invalid queue ID, or they dont have
            rights to the queue or the request body does not contain the required information.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403LicenseNotAvailable'

  /system-tasks:
    get:
      summary: |-
        Gets the information about system tasks.
      tags:
       - Tasks
      parameters:
        - in: query
          name: type
          description: |-
            The type of work item the system task can execute on.
          required: true
          schema:
            $ref: '#/components/schemas/WorkItemTypeEnum'
        - in: query
          name: id
          schema:
            type: string
          required: true
          description: |-
            ID of the type of item to retrieve the system tasks for.  For documents this would
            be the document type ID, for WorkView objects this would be the WorkView class ID etc..
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemTaskCollectionModel'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403LicenseNotAvailable'

  /system-tasks/{systemTaskId}:
    get:
      summary: |-
        Gets the information about a system task.
      tags:
       - Tasks
      parameters:
        - $ref: '#/components/parameters/systemTaskIdPathParam'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemTaskModel'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403LicenseNotAvailable'
        404:
          description: |-
            Response when the system task does not exist, or the user does not have rights
            to the system task.

  /system-tasks/{systemTaskId}/execute:
    post:
      summary: |-
        Executes a system task.
      tags:
       - Tasks
      parameters:
        - $ref: '#/components/parameters/systemTaskIdPathParam'
      requestBody:
        description: Contains information required to execute the system task.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteTaskModel'
      responses:
        201:
          $ref: '#/components/responses/201TaskHasBeenScheduledForExecution'
        400:
          description: |-
            Response when the client specifies an invalid system task ID, or they dont have
            rights to the system task or the request body does not contain the required
            information.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403LicenseNotAvailable'

  /tasks/operations/{operationId}:
    parameters:
      - $ref: '#/components/parameters/operationIdPathParam'
    get:
      summary: |-
        Gets the current status of the task execution
      description: |-
        When the server is requested to execute an ad hoc or system task it will respond
        with a 201 Created response along with a URI that can be used to query the current
        status of the task execution - this will be that URI.
      tags:
       - Tasks
      responses:
        200:
         description: OK
         content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteTaskStatusModel'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403LicenseNotAvailable'
        404:
          description: |-
            Response when operationId does not exist.

  /tasks/operations/{operationId}/ui-interaction:
    parameters:
      - $ref: '#/components/parameters/operationIdPathParam'
    post:
      summary: |-
        Posts the results of a task execution requiring user interaction.
      tags:
       - Tasks
      requestBody:
        description: Contains information required to execute the ad hoc task.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteTaskStatusRequiresUIResponseModel'
      responses:
        200:
         description: OK
         content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteTaskStatusModel'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403LicenseNotAvailable'
        404:
          description: |-
            Response when operationId does not exist.

  /tasks/operations/{operationId}/cancel:
    parameters:
      - $ref: '#/components/parameters/operationIdPathParam'
    post:
      summary: |-
        Cancels/aborts a task execution.
      tags:
       - Tasks
      responses:
        204:
          description: No Content
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403LicenseNotAvailable'
        404:
          description: |-
            Response when operationId does not exist.

  /work-items/locations:
    get:
      summary: |-
        Gets the locations where a work item is within workflow.
      tags:
       - Work Items
      parameters:
        - in: query
          name: type
          description: |-
            Type of work item.
          required: true
          schema:
            $ref: '#/components/schemas/WorkItemTypeEnum'
        - $ref: '#/components/parameters/workItemIdQueryParam'
        - $ref: '#/components/parameters/workItemClassIdQueryParam'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkItemLocationCollectionModel'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403LicenseNotAvailable'
        404:
          description: |-
            Response when the work item does not exist

  /work-items/tasks:
    get:
      summary: |-
        Gets the list of ad hoc and system tasks that are available to work items.
      description: |-
        Gets the list of ad hoc and system tasks that are available to be executed
        on the specified list of work items.
      tags:
       - Work Items
      parameters:
        - in: query
          name: queueId
          schema:
            type: string
          description: |-
            If specified, the list of ad hoc tasks will be limited to those that are
            specified in this queue.
        - $ref: '#/components/parameters/workItemsQueryParam'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdHocAndSystemTasksModel'
        400:
          description: Response when FIQL query is invalid or not supported.
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403LicenseNotAvailable'
    post:
      summary: |-
        Gets the list of ad hoc and system tasks that are available to work items.
      description: |-
        Gets the list of ad hoc and system tasks that are available to be executed
        on the specified list of work items.  This API is expected to be used if the
        URL exceeds the length supported by a client or server.
      tags:
        - Work Items
      parameters:
        - $ref: '#/components/parameters/X-Http-Method-Override-Get-QueryParam'
      requestBody:
        description: Contains information required to execute the ad hoc task.
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                queueId:
                  type: string
                  description: |-
                    If specified, the list of ad hoc tasks will be limited to those that are
                    specified in this queue.
                workitems:
                  type: string
                  description: |-
                    <a href="https://tools.ietf.org/id/draft-nottingham-atompub-fiql-00.txt">FIQL</a> query
                    describing a list of work items to retrieve the list of ad hoc and system tasks for.

                    If an ad hoc task has filter rules configured, then they will be evaluated and tasks that
                    do not meet the filter rules conditions will not be returned.

                    An example of specifying document id 101 and 102
                    ```
                    workitems=(type==document;id==101);(type==document;id==102)
                    ```

                    An example of specifying a WorkView object id 101 and 102 in class 201
                    ```
                    workitems=(type==workview;classid==201;id==101);(type==workview;classid==201;id==101)
                    ```

                    Only the equals and 'AND' operators will be supported, submitting a query with any other
                    operator will result in a 400 Bad Request response.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdHocAndSystemTasksModel'
        400:
          description: Response when FIQL query is invalid or not supported.
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403LicenseNotAvailable'

  /icons/{iconId}:
    get:
      summary: |-
        Gets the image data for an icon
      description: |-
        Gets the image data out of the **SYS System Bitmaps** and **SYS System Icons** regardless
        of whether the user has rights to those document types.
      tags:
        - Miscellaneous
      parameters:
        - $ref: '#/components/parameters/iconIdPathParam'
      responses:
        200:
          $ref: '#/components/responses/200IconResponse'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403LicenseNotAvailable'
        404:
          description: |-
            Response when the icon id is not valid.

#--------------------------------------------------------------------------------
# Components
#--------------------------------------------------------------------------------
components:

  #--------------------------------------------------------------------------------
  # Security schemes
  #--------------------------------------------------------------------------------
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer

  #--------------------------------------------------------------------------------
  # Schemas
  #--------------------------------------------------------------------------------
  schemas:
    #--------------------------------------------------------------------------------
    # Enums
    #--------------------------------------------------------------------------------
    WorkItemTypeEnum:
      description: |-
        Type of work item.
      type: string
      enum: [Document,Folder,WorkView,Entity,EISMessageItem]
      example: Document

    TaskInteractionTypeEnum:
      description: |-
        Interaction types that tasks can require.
      type: string
      enum: [MessageBox,QuestionBox]

    TaskExecutionStatusEnum:
      description: |-
        Status of a task execution.
      type: string
      enum: [NotStarted,Executing,RequiresUserInteraction,Canceling,Canceled,Completed,Failed]
      example: Executing

    #--------------------------------------------------------------------------------
    # Models
    #--------------------------------------------------------------------------------
    LifeCycleCollectionModel:
      description: |-
        Information about life cycles.
      properties:
        LifeCycleCollectionModel:
          description: List of life cycles.
          type: array
          items:
            $ref: '#/components/schemas/LifeCycleModel'
      required:
        - LifeCycleCollectionModel

    LifeCycleModel:
      description: |-
        Information about a life cycle.
      allOf:
        - $ref: '#/components/schemas/IdAndNameModel'
        - $ref: '#/components/schemas/SmallIconIdModel'

    QueueCollectionModel:
      description: |-
        Information about queues.
      properties:
        QueueCollectionModel:
          description: |-
            List of queues.
          type: array
          items:
            $ref: '#/components/schemas/QueueModel'
      required:
        - QueueCollectionModel

    QueueModel:
      description: |-
        Information about a queue.
      allOf:
        - $ref: '#/components/schemas/IdAndNameModel'
        - $ref: '#/components/schemas/ScopedToLifeCycleModel'
        - $ref: '#/components/schemas/LargeIconIdModel'
        - $ref: '#/components/schemas/SmallIconIdModel'

    AdHocTaskCollectionModel:
      description: |-
        Information relating to an ad hoc task.
      properties:
        AdHocTaskCollectionModel:
          description: |-
            List of ad hoc tasks in the life cycle and queue
          type: array
          items:
            $ref: '#/components/schemas/AdHocTaskModel'
      required:
       - AdHocTaskCollectionModel

    AdHocTaskModel:
      description: |-
        Information relating to an ad hoc task.
      allOf:
        - $ref: '#/components/schemas/IdAndNameModel'
        - $ref: '#/components/schemas/LargeIconIdModel'
        - $ref: '#/components/schemas/SmallIconIdModel'

    SystemTaskCollectionModel:
      description: |-
        List of system tasks that are available to execute.
      properties:
        SystemTaskCollectionModel:
          description: List of system tasks.
          type: array
          items:
            $ref: '#/components/schemas/SystemTaskModel'
      required:
       - SystemTaskCollectionModel

    SystemTaskModel:
      description: |-
        Information relating to a system task.
      allOf:
        - $ref: '#/components/schemas/IdAndNameModel'
        - $ref: '#/components/schemas/LargeIconIdModel'
        - $ref: '#/components/schemas/SmallIconIdModel'

    AdHocAndSystemTasksModel:
      description: |-
        Information about ad hoc and system tasks.
      properties:
        AdHocTasks:
          description: |-
            List of queue ids and ad hoc tasks in those queues that can be executed
            on the work items.
          type: array
          items:
            properties:
              queueId:
                type: string
              AdHocTaskModel:
                type: array
                items:
                  # Ad hoc tasks that can be executed on the work items
                  $ref: '#/components/schemas/AdHocTaskModel'
        SystemTasks:
          type: array
          items:
            # System tasks that can be executed on the work items
            $ref: '#/components/schemas/SystemTaskModel'

    WorkItemIDModel:
      description: |-
        Contains the information that uniquely identifies a work item.
      properties:
        id:
          type: string
          description: ID of work item.
        classId:
          type: string
          description: Class ID of work item if required.
        type:
          $ref: '#/components/schemas/WorkItemTypeEnum'
      required:
        - id
        - type

    WorkItemLocationCollectionModel:
      description: |-
        List of workflow locations where a work item is located.
      properties:
        WorkItemLocationModel:
          description: Location in workflow where a work item is located.
          type: array
          items:
            $ref: '#/components/schemas/WorkItemLocationModel'

    WorkItemLocationModel:
      description: |-
        Location in workflow where a work item is located.
      properties:
        lifecycleId:
          description: |-
            The unique indentifier of the life cycle the work item is in. <b>NOTE</b> The user
            may not have rights to the life cycle.
          type: string
        queueId:
          description: |-
            The unique indentifier of the queue the work item is in. <b>NOTE</b> The user
            may not have rights to the queue.
          type: string

    IdAndNameModel:
      properties:
        id:
          description: |-
            ID of item.
          type: string
        name:
          description: |-
            Name of item.
          type: string
      required:
        - id
        - name

    ScopedToLifeCycleModel:
      properties:
        lifeCycleID:
          description: |-
            ID of the life cycle this item is contained in.
          type: string
      required:
       - lifeCycleID

    SmallIconIdModel:
      properties:
        smallIconId:
          description: |-
            ID of document in **SYS System Icons** or **SYS System Bitmaps** which
            contains the image for the item.
          type: string

    LargeIconIdModel:
      properties:
        largeIconId:
          description: |-
            ID of document in **SYS System Icons** or **SYS System Bitmaps** which
            contains the image for the item.
          type: string

    ExecuteTaskModel:
      description: Information required for workflow to execute an ad hoc or system task.
      properties:
        allowedInteractions:
          type: array
          items:
            $ref: '#/components/schemas/TaskInteractionTypeEnum'
          example:
            - MessageBox
            - QuestionBox
          description: |-
            List of task interaction types the client supports.  An action or rule may perform
            a default operation if it is executed and wanted to require a task interaction
            that is not in this list.
        workItems:
          type: array
          items:
            $ref: '#/components/schemas/WorkItemIDModel'
          description: |-
            List of work items to execute the task on.

    #--------------------------------------------------------------------------------
    # Execute Task Status Models
    #--------------------------------------------------------------------------------
    ExecuteTaskStatusModel:
      description: |-
        Contains the status of an ad hoc or system task execution.
      allOf:
        - properties:
            status:
              $ref: '#/components/schemas/TaskExecutionStatusEnum'
        - oneOf:
          - $ref: '#/components/schemas/ExecuteTaskStatusNotStartedModel'
          - $ref: '#/components/schemas/ExecuteTaskExecutingStatusModel'
          - $ref: '#/components/schemas/ExecuteTaskStatusRequiresUIModel'
          - $ref: '#/components/schemas/ExecuteTaskStatusCancelingModel'
          - $ref: '#/components/schemas/ExecuteTaskStatusCanceledModel'
          - $ref: '#/components/schemas/ExecuteTaskStatusCompletedModel'
          - $ref: '#/components/schemas/ExecuteTaskStatusFailedModel'
          discriminator:
            propertyName: status
            mapping:
              NotStarted: '#/components/schemas/ExecuteTaskStatusNotStartedModel'
              Executing: '#/components/schemas/ExecuteTaskExecutingStatusModel'
              RequiresUserInteraction: '#/components/schemas/ExecuteTaskStatusRequiresUIModel'
              Canceling: '#/components/schemas/ExecuteTaskStatusCancelingModel'
              Canceled: '#/components/schemas/ExecuteTaskStatusCanceledModel'
              Completed: '#/components/schemas/ExecuteTaskStatusCompletedModel'
              Failed: '#/components/schemas/ExecuteTaskStatusFailedModel'

    ExecuteTaskStatusNotStartedModel:
      description: |-
        Information that is returned when a task has not yet started executing.

    ExecuteTaskExecutingStatusModel:
      description: |-
        Information that is returned when a task is currently executing.
      properties:
        currentItem:
          type: integer
          description: Work item of work item that is currently being executed on.
          example: 2
        totalItems:
          type: integer
          description: Total number of work items that will be executed on.
          example: 10

    ExecuteTaskStatusCancelingModel:
      description: |-
        Information that is returned whe n atask is being canceled.

    ExecuteTaskStatusCanceledModel:
      description: |-
        Information that is returned when a task has been canceled.

    ExecuteTaskStatusCompletedModel:
      description: |-
        Information that is returned when a task has completed executing.
      properties:
        items:
          type: array
          items:
            properties:
              reason:
                type: string
                enum: [Locked,NotInQueue,NotOwnedByUser]
                description: |-
                  The reason why the task was not executed on the work item.
                  - Locked: The work item was locked by another user.
                  - NotInQueue: The work item was no longer in the queue.
                  - NotOwnedByUser: the work item was not owned by the user and the task was configured to take ownership.
                example: Locked
            allOf:
              - $ref: '#/components/schemas/WorkItemIDModel'
            required:
              - reason
          description: |-
            List of work items that were not executed on due to them being
            locked by another user, not in the queue etc...

    ExecuteTaskStatusFailedModel:
      description: |-
        Information that is returned when a task failed to execute a task.
      properties:
        details:
          $ref: '#/components/schemas/ProblemDetail'

    ExecuteTaskStatusRequiresUIModel:
      description: |-
        Information that is returned when a task requires user interaction.
      properties:
        type:
          $ref: '#/components/schemas/TaskInteractionTypeEnum'
        workitem:
          $ref: '#/components/schemas/WorkItemIDModel'
        userInteraction:
          type: object
          oneOf:
            - $ref: '#/components/schemas/ExecuteTaskUIRequestMessageBoxModel'
            - $ref: '#/components/schemas/ExecuteTaskUIRequestQuestionBoxModel'
          discriminator:
            propertyName: type
            mapping:
              MessageBox: '#/components/schemas/ExecuteTaskUIRequestMessageBoxModel'
              QuestionBox: '#/components/schemas/ExecuteTaskUIRequestQuestionBoxModel'

    ExecuteTaskStatusRequiresUIResponseModel:
      description: |-
        Contains the response information from a client for a task execution
        that requires user interaction.
      properties:
        response:
          type: object
          oneOf:
            - $ref: '#/components/schemas/ExecuteTaskUIResponseMessageBoxModel'
            - $ref: '#/components/schemas/ExecuteTaskUIResponseQuestionBoxModel'

    #--------------------------------------------------------------------------------
    # Task UI Model: MessageBox
    #--------------------------------------------------------------------------------
    ExecuteTaskUIRequestMessageBoxModel:
      description: |-
        Information describing the message box a client should display
      properties:
        message:
          type: string
          description: Message to display to the user.

    ExecuteTaskUIResponseMessageBoxModel:
      description: |-
        Contains the response information from a client for a task execution
        that requires information for a MessageBox user interaction type.
      properties:
        result:
          type: string
          enum: [True]
      required:
        - result

    #--------------------------------------------------------------------------------
    # Task UI Model: QuestionBox
    #--------------------------------------------------------------------------------
    ExecuteTaskUIRequestQuestionBoxModel:
      description: |-
        Information describing the question box a client should display
      properties:
        message:
          type: string
          description: Message to display to the user.
        yesButtonCaption:
          type: string
          description: Text to display on the Yes button.
        noButtonCaption:
          type: string
          description: Text to display on the No button.
        cancelButtonCaption:
          type: string
          description: Text to display on the Cancel button.
        includeCancelButton:
          type: boolean
          description: Determines if the Cancel button should be displayed in the message prompt

    ExecuteTaskUIResponseQuestionBoxModel:
      description: |-
        Contains the response information from a client for a task execution
        that requires information for a QuestionBox user interaction type.
      properties:
        result:
          type: string
          enum: [Yes,No,Cancel]
          description: The button that was pressed by the user.
      required:
        - result

    BinaryContent:
      description: |-
        Binary response content. Consumers should inspect the
        `Content-Type` response header to determine the
        content format.
      type: string
      format: binary

    ProblemDetail:
      type: object
      description: |-
        The <a href="https://tools.ietf.org/html/rfc7807">Problem Detail</a>
        format defines a way to carry machine-readable details of errors in a
        HTTP response to avoid the need to define new error response formats for
        HTTP APIs.

        Problem details can be extended and defined for specific
        problem types.
      properties:
        type:
          type: string
          format: uri
          description: |-
            An absolute URI that identifies the problem type.  When
            dereferenced, it should provide human-readable documentation
            for the problem type (e.g., using HTML).
          example: https://example.net/validation_error
        title:
          type: string
          description: |-
            A short, human-readable summary of the problem type. It should
            not change from occurrence to occurrence of the problem.
          example: Your request parameters didn't validate.
        status:
          type: integer
          format: int32
          description: |-
            The HTTP status code generated by the origin server for this
            occurrence of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 400
        detail:
          type: string
          description: |-
            A human readable explanation specific to this occurrence of the
            problem.
          example: The parameter `count` was not valid for the request.
        instance:
          type: string
          format: uri
          description: |-
            A URI reference that identifies the specific occurrence of
            the problem.  It may or may not yield further information
            if dereferenced.
          example: /example-resource

  #--------------------------------------------------------------------------------
  # Reusable operation parameters
  #--------------------------------------------------------------------------------
  parameters:
    #------------------------------------------------------------------------------
    # Path parameters
    #------------------------------------------------------------------------------
    lifeCycleIdPathParam:
      in: path
      name: lifeCycleId
      description: |-
        ID of a life cycle.
      required: true
      schema:
        type: string

    queueIdPathParam:
      in: path
      name: queueId
      description: |-
        ID of a queue.
      required: true
      schema:
        type: string

    adhocTaskIdPathParam:
      in: path
      name: adhocTaskId
      description: |-
        ID of an ad hoc task.
      required: true
      schema:
        type: string

    systemTaskIdPathParam:
      in: path
      name: systemTaskId
      description: |-
        ID of a system task.
      required: true
      schema:
        type: string

    operationIdPathParam:
      in: path
      name: operationId
      description: Operation ID of a Task.
      required: true
      schema:
        type: string
        format: uuid

    iconIdPathParam:
      in: path
      name: iconId
      description: |-
        ID of icon.
      required: true
      schema:
        type: string

    #------------------------------------------------------------------------------
    # Query parameters
    #------------------------------------------------------------------------------
    workItemIdQueryParam:
      in: query
      name: id
      description: |-
        ID of the work item.
        For documents this is the document id, for workview this is the workview object id.
      required: true
      schema:
        type: string

    workItemClassIdQueryParam:
      in: query
      name: classId
      description: |-
        Class id of work item.
        Required for WorkView, Entity and EISMessageItem work item types.
      schema:
        type: string

    workItemsQueryParam:
      in: query
      name: workItems
      required: true
      description: |-
        <a href="https://tools.ietf.org/id/draft-nottingham-atompub-fiql-00.txt">FIQL</a> query
        describing a list of work items to retrieve the list of ad hoc and system tasks for.

        If an ad hoc task has filter rules configured, then they will be evaluated and tasks that
        do not meet the filter rules conditions will not be returned.

        An example of specifying document id 101 and 102
        ```
        workitems=(type==document;id==101);(type==document;id==102)
        ```

        An example of specifying a WorkView object id 101 and 102 in class 201
        ```
        workitems=(type==workview;classid==201;id==101);(type==workview;classid==201;id==101)
        ```

        Only the equals and 'AND' operators will be supported, submitting a query with any other
        operator will result in a 400 Bad Request response.
      schema:
        type: string

    #------------------------------------------------------------------------------
    # Query parameters
    #------------------------------------------------------------------------------
    X-Http-Method-Override-Get-QueryParam:
      in: header
      name: X-HTTP-Method-Override
      description: -|
        Method override is used to get around a 414 - Request URI Too Long error.
      required: true
      schema:
        type: string
        enum: [Get]

  #--------------------------------------------------------------------------------
  # Reusable headers
  #--------------------------------------------------------------------------------
  headers:
    Task-Location:
      schema:
        type: string
        example: /tasks/operations/0d23595d-de85-4dbf-a009-b04e1b08f870
      description: URI that can be used to query the status of the task execution

  #--------------------------------------------------------------------------------
  # Reusable responses
  #--------------------------------------------------------------------------------
  responses:
    200IconResponse:
      description: |-
        OK
      headers:
        Content-Type:
          schema:
            type: string
            example: image/png
          description: Media type of the icon image.
      content:
        image/png:
          schema:
            $ref: '#/components/schemas/BinaryContent'

    201TaskHasBeenScheduledForExecution:
      description: |-
        Task has been scheduled for execution.
      headers:
        Location:
          $ref: '#/components/headers/Task-Location'

    401Unauthorized:
      description: |-
        Response when the client does not supply authorization credentials.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    403LicenseNotAvailable:
      description: |-
        Response when the server is not licensed for workflow or failed to
        acquire a workflow license.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

