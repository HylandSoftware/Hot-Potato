openapi: 3.0.0
info:
  title: Message Storage Service
  description: |-
              The purpose of the Message Storage Service is to provide a place for the On Ramp to save the message for the Worker to later read when it is ready to process the message.
              This will function as a blob service which can store the content and return it back. <br>More details about this service can found in this RFC.
              [LiveGenic Remote Document Downloader Service](https://gitlab.hylandqa.net/architecture/rfcs/blob/master/rfc/integrations/project-153-livegenic-remote-doc-downloader.md#message-storage-service)

  version: 1.0.0-draft1
  x-api-product:
    program: Integrations and Business Process Applications
    name: RDDS Messaging
servers:
  - url: '{server}/ibpaf/rdds'
    variables:
      server:
        default: https://api.hyland.com
        description: This is the server being used to host the API in the current
          environment.
paths:
  /messages:
    post:
      summary: Saves the posted message.
      description: Accepts string in any format, content type should be used in the header
      tags:
        - Messages
      parameters:
          - $ref: '#/components/parameters/content-type'
      requestBody:
        required: true
        content:
         'text/*':
           schema:
             $ref: '#/components/schemas/MessageContent'
           example: this can be just a string
         'application/*':
            schema:
             $ref: '#/components/schemas/MessageContent'
            examples:
              application/json:
                summary: json example
                value: |
                  {
                    "LGNotification":
                    {
                      "URL": "http://domain.com/program/app?clienttype=htmlamp;id=49977",
                      "StatusFlag": "new",
                      "MediaType": "video"
                    }
                  }
              application/xml:
                summary: xml sample
                value: |
                  <LGNotification>
                      <MediaType>video</MediaType>
                      <StatusFlag>new</StatusFlag>
                      <URL>http://domain.com/program/app?clienttype=htmlamp;id=49977</URL>
                  </LGNotification>
      responses:
        '201':
          description: message is created.
          headers:
            location:
              $ref: '#/components/headers/location'
        '400':
          description: bad request, the request string cannot be empty.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        '415':
          description: |
            unsupported media type, this error is thrown when the content-type is missing.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
  /messages/{messageId}:
    get:
      summary: Returns the message matching the ID.
      tags:
        - Messages
      parameters:
        - $ref: '#/components/parameters/messageId'
      responses:
        '200':
          description: the requested message is returned.
          content:
            '*/*':
              schema:
                type: string
        '404':
          description: message was found for the given messageId, nothing will be returned.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    delete:
      summary: Removes the message matching the ID.
      tags:
        - Messages
      parameters:
        - $ref: '#/components/parameters/messageId'
      responses:
        '204':
          description: message was successfully deleted.
        '404':
          description: message was not found for the given messageId, hence nothing will be deleted
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
components:
  parameters:
    messageId:
      in: path
      name: messageId
      required: true
      schema:
        type: string
      description: ID of the message
    content-type:
      name: Content-Type
      in: header
      description: |-
        A standardized <a href="https://tools.ietf.org/html/rfc1049">Content-type</a>
        field allows the receiver to automatically identify the type of a structured message body and to process it for display accordingly.
      required: true
      schema:
        type: string
      example: 'Content-Type: text/plain'
  headers:
    location:
      description: |-
        The "Location" header field is used in responses to refer to a
        specific resource in relation to the response.  The type of
        relationship is defined by the combination of request method and
        status code semantics.
        For message storage service, the location gives the URI of the newly created
        object.
        Reference: https://tools.ietf.org/html/rfc7231#section-7.1.2
      example: ibpaf/rdds/messages/1
      schema:
        type: string
  schemas:
    MessageContent:
      description: |-
         Message content is stored in text format. It can be in plain text, json, xml or any text based content-type.
    Problem-Detail:
      type: object
      description: |-
        The <a href="https://tools.ietf.org/html/rfc7807">Problem Detail</a>
        format defines a way to carry machine-readable details of errors in a
        HTTP response to avoid the need to define new error response formats for
        HTTP APIs.

        Problem details can be extended and defined for specific
        problem types.
      properties:
        type:
          type: string
          format: uri
          description: |-
            A URI reference that identifies the problem type. It provides human readable documentation about the problem type if dereferenced.
            The default value for this property, if not set or does not appear on an error response is “about:blank”.
          example: https://example.net/validation_error
        title:
          type: string
          description: |-
            A human-readable description of the problem type.
            The description is written in English or translated to the culture specific language on
            the client request that produced the problem.
          example: Your request parameters didn't validate.
        status:
          type: integer
          format: int32
          description: |-
            The HTTP status code generated by the origin server for this
            occurrence of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 400
        detail:
          type: string
          description: |-
            A human readable explanation specific to this occurrence of the
            problem.
          example: The configuration 'name' field cannot be empty.
        instance:
          type: string
          format: uri
          description: |-
            A URI reference that identifies the specific occurrence of the problem.
            It yields additional information about occurrence of the problem if dereferenced.
          example: /example-resource
      required:
        - title
        - status
        - detail
