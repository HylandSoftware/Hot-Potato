openapi: '3.0.0'
info:
  version: 1.0.0-latest
  title: OnBase Document API
  x-api-product:
    program: Content Services Platform
    name: Document
  x-releases:
    - label: Current Spec (1.0.0-draft10)
      commit: 5475b88fa6d683582c1c65a0e954a914db20cd50
      path: specs/document/specification.yaml
    - label: Implemented Spec (1.0.0-draft10)
      commit: 5475b88fa6d683582c1c65a0e954a914db20cd50
      path: specs/document/specification.yaml
security:
  - Bearer: []
tags:
  - name: custom-queries
    description: Configuration items related to custom queries.
  - name: document-types
    description: Configuration items related to document types.
  - name: document-type-groups
    description: Configuration items related to document type groups.
  - name: file-types
    description: Configuration items related to file types.
  - name: document
    description: Document archival and metadata retrieval.
  - name: document keywords
    description: Document keywords.
  - name: document revisions
    description: Document revisions.
  - name: document renditions
    description: Document renditions.
  - name: document content
    description: Document content retrieval.
  - name: document retrieval
    description: Document search.
  - name: file upload
    description: File upload for document archival.
  

paths:
  /custom-queries:
    get:
      summary: |-
        Get the custom query metadata for all custom queries for the user.
      description: |-
        Get all the custom queries the logged in user has permissions to view.
      tags:
        - custom-queries
      parameters:
        - in: query
          name: id
          schema:
            type: array
            items:
              type: string
          description: The unique identifiers of custom queries. This parameter cannot be used in conjunction with the `systemName` parameter. Multiple values are supported and in a URL should be joined using the "&" character.  Ex:?item=12&item=13
        - in: query
          name: systemName
          schema:
            type: array
            items:
              type: string
          description: The unique configured system names of custom queries. This parameter cannot be used in conjunction with the `id` parameter. Multiple values are supported and in a URL should be joined using the "&" character.  Ex:?item=12&item=13
        - $ref: '#/components/parameters/Accept-Language'
      responses:
        200:
          description: |-
            OK
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomQueryCollection'
        400:
          description: |-
            Response when the user tries to combine id and systemName query parameters
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for custom query metadata.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - custom-queries
      parameters:
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /custom-queries/{customQueryId}:
    get:
      summary: |-
        Gets custom query metadata
      description: |-
        Gets custom query metadata
      tags:
        - custom-queries
      parameters:
        - $ref: '#/components/parameters/customQueryId'
        - $ref: '#/components/parameters/Accept-Language'
      responses:
        200:
          description: |-
            OK
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomQuery'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response when the resource does not exist or the user does not have rights to the resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for custom query metadata.
      description: |-
        The 'OPTIONS' method is available to support `CORS` preflight requests.
      tags:
        - custom-queries
      parameters:
        - $ref: '#/components/parameters/customQueryId'
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /custom-queries/{customQueryId}/keyword-types:
    get:
      summary: |-
        Gets keyword types for a custom query
      description: |-
        Gets a keyword type collection for the custom query
      tags:
        - custom-queries
      parameters:
        - $ref: '#/components/parameters/customQueryId'
      responses:
        200:
          description: |-
            OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomQueryKeywordTypeCollection'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response when the resource does not exist or the user does not have
            rights to the resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for keyword-types for a custom query
      description: |-
        The 'OPTIONS' method is available to support `CORS` preflight requests.
      tags:
        - custom-queries
      parameters:
        - $ref: '#/components/parameters/customQueryId'
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /document-types:
    get:
      summary: |-
        Get a list of document types.
      description: |-
        Get all the document types the logged in user has permissions to view.
      tags:
        - document-types
      parameters:
        - in: query
          name: id
          schema:
            type: array
            items:
              type: string
          description: The unique identifiers of document types.This parameter cannot be used in conjunction with the `systemName` parameter. Multiple values are supported and in a URL should be joined using the "&" character.  Ex:?item=12&item=13
        - in: query
          name: systemName
          schema:
            type: array
            items:
              type: string
          description: The unique configured system names of document types. This parameter cannot be used in conjunction with the `id` parameter. Multiple values are supported and in a URL should be joined using the "&" character.  Ex:?item=12&item=13
        - $ref: '#/components/parameters/Accept-Language'
      responses:
        200:
          description: |-
            OK
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTypeCollection'
        400:
          description: |-
            Response when the user tries to combine id and systemName query parameters
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for document type.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - document-types
      parameters:
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /document-types/{documentTypeId}:
    get:
      summary: |-
        Get a document type
      description: |-
        Gets the document type with the associated id.
      tags:
        - document-types
      parameters:
        - $ref: '#/components/parameters/documentTypeId'
        - $ref: '#/components/parameters/Accept-Language'
      responses:
        200:
          description: |-
            OK
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentType'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response when the resource does not exist or the user does not have
            rights to the specified document type.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for a document type.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - document-types
      parameters:
        - $ref: '#/components/parameters/documentTypeId'
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /document-types/{documentTypeId}/keyword-type-groups:
    get:
      summary: |-
        Get keyword type group metadata for a document type.
      description: |-
        Gets the associated keyword type groups or associated list of keyword types for standalone keywords. 

        The keyword type group metadata will be returned in the display order as it has
        been configured on the document type.
      tags:
        - document-types
      parameters:
        - $ref: '#/components/parameters/documentTypeId'
        - $ref: '#/components/parameters/Accept-Language'
      responses:
        200:
          description: |-
            OK
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
            Keyword-Hash:
              schema:
                type: string
              description: |-
                Guid to reference the hashed keyword data string for
                the hidden and readonly keywords on the document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordTypeGroupCollectionModel'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response when the resource does not exist or the user does not have
            rights to the specified document type.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for keyword metadata for a document type.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - document-types
      parameters:
        - $ref: '#/components/parameters/documentTypeId'
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /document-type-groups:
    get:
      summary: |-
        Get a list of document type groups.
      description: |-
        Get all the document type groups the logged in user has permissions to view.
      tags:
        - document-type-groups
      parameters:
        - in: query
          name: id
          schema:
            type: array
            items:
              type: string
          description: The unique identifiers of document type groups. This parameter cannot be used in conjunction with the `systemName` parameter. Multiple values are supported and in a URL should be joined using the "&" character.  Ex:?item=12&item=13
        - in: query
          name: systemName
          schema:
            type: array
            items:
              type: string
          description: The unique system names of document type groups. This parameter cannot be used in conjunction with the `id` parameter. Multiple values are supported and in a URL should be joined using the "&" character.  Ex:?item=12&item=13
        - $ref: '#/components/parameters/Accept-Language'
      responses:
        200:
          description: |-
            OK
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTypeGroupCollection'
        400:
          description: |-
            Response when the user tries to combine id and systemName query parameters
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for document type groups.
      description: |-
          The 'OPTIONS' method is available to support 'CORS' preflight requests.
      tags:
        - document-type-groups
      parameters:
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /document-type-groups/{documentTypeGroupId}:
    get:
      summary: |-
        Get a document type group
      description: |-
        Gets the document type group with the associated id.
      tags:
        - document-type-groups
      parameters:
        - $ref: '#/components/parameters/documentTypeGroupId'
        - $ref: '#/components/parameters/Accept-Language'
      responses:
        200:
          description: |-
            OK
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTypeGroup'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response when the resource does not exist or the user does not have
            rights to the specified document type.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for document type group metadata
      description: |-
        The 'OPTIONS' method is available to support 'CORS' preflight requests.
      tags:
        - document-type-groups
      parameters:
        - $ref: '#/components/parameters/documentTypeGroupId'
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /document-type-groups/{documentTypeGroupId}/document-types:
    get:
      summary: |-
        Gets the associated document types for a document type group
      description: |-
        Gets the associated document type collection for the document type group
      tags:
        - document-type-groups
      parameters:
        - $ref: '#/components/parameters/documentTypeGroupId'
      responses:
        200:
          description: |-
            OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTypeGroupDocumentTypeCollection'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response when the resource does not exist or the user does not have
            rights to the specified document type group.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for document type list of a document type group
      description: |-
        The 'OPTIONS' method is available to support 'CORS' preflight requests.
      tags:
        - document-type-groups
      parameters:
        - $ref: '#/components/parameters/documentTypeGroupId'
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /file-types:
    get:
      summary: |-
        Get file type metadata for all file types.
      description: |-
        Get the file type metadata for all file types in
        the system.
      tags:
        - file-types
      parameters:
        - in: query
          name: id
          schema:
            type: array
            items:
              type: string
          description: The unique identifiers of file types. This parameter cannot be used in conjunction with the `systemName` parameter. Multiple values are supported and in a URL should be joined using the "&" character.  Ex:?item=12&item=13
        - in: query
          name: systemName
          schema:
            type: array
            items:
              type: string
          description: The unique configured system names of file types. This parameter cannot be used in conjunction with the `id` parameter. Multiple values are supported and in a URL should be joined using the "&" character.  Ex:?item=12&item=13
        - $ref: '#/components/parameters/Accept-Language'
      responses:
        200:
          description: |-
            OK
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileTypeCollection'
        400:
          description: |-
            Response when the user tries to combine id and systemName query parameters
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for file type metadata.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - file-types
      parameters:
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /file-types/{fileTypeId}:
    get:
      summary: |-
        Get file type metadata.
      description: |-
        Get file type metadata for the specified file type id.
      tags:
        - file-types
      parameters:
        - $ref: '#/components/parameters/fileTypeId'
        - $ref: '#/components/parameters/Accept-Language'
      responses:
        200:
          description: |-
            OK
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileType'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response when the resource does not exist.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for file type metadata.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - file-types
      parameters:
        - $ref: '#/components/parameters/fileTypeId'
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'

  /documents:
    post:
      summary: |-
        Archive the document.
      description:
        Finishes the document upload by archiving the document into the given document type.
        Can also optionally specify the document date and keywords for the document.
        If fileTypeId is not specified, then the default file type for the document type will be used.
        Takes a list of references to uploaded file resources.
      tags:
        - document
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentArchiveProperties'
      responses:
        201:
          description:
            Document successfully archived.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentsPostResponse'
          headers:
            location:
              $ref: '#/components/headers/location'
        400:
          description:
            Invalid document type or a unique handle is not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
           application/problem+json:
            schema:
              $ref: '#/components/schemas/Problem-Detail'
        403:
          description:
            User does not have rights to create document.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for uploading document.
      description:
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - document
      parameters:
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /documents/{documentId}:
    get:
      summary: |-
        Gets document metadata.
      description: |-
        Gets document metadata.
      tags:
        - document
      parameters:
        - $ref: '#/components/parameters/documentId'
      responses:
        200:
          description: |-
            OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response for when the document cannot be found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for document metadata.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - document
      parameters:
        - $ref: '#/components/parameters/documentId'
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
    delete:
      summary: |-
        Deletes a document.
      description: |-
        Deletes a document.
      tags:
        - document
      parameters:
        - $ref: '#/components/parameters/documentId'
      responses:
        204:
          description: |-
            No Content
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        403:
          description: |-
            Response when the user does not have rights to the specified document, 
            retention criteria has not been met, or the resource is checked out.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response when the resource does not exist or the user does not have rights to the specified document.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
  /documents/{documentId}/keywords:
    get:
      summary: |-
        Gets keywords for a document.
      description: |-
        Gets the keyword values for a document grouped by keyword type group and
        keyword type.
      tags:
        - document keywords
      parameters:
        - $ref: '#/components/parameters/documentId'
      responses:
        200:
          description: |-
            OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordCollection'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        403:
          description: |-
            Response when the user does not have the document privilege `View
            Keywords`
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response when the resource does not exist or the user does not have
            rights to the document type of the document.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    put:
      summary: |-
        Sets all keyword values for an indexed document.
      description: |-
        Sets all keyword values for an indexed document. Existing values will be
        replaced with the supplied list of keyword values grouped by keyword type
        group and keyword type.
      tags:
        - document keywords
      parameters:
        - $ref: '#/components/parameters/documentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeywordCollectionPutRequest'
      responses:
        204:
          description: |-
            No Content
        400:
          description: |-
            Response when the user sends a empty request body, invalid keyword syntax,
            invalid keyword data, or missing restricted keyword hash.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        403:
          description: |-
            Response when the user does not have the document privilege `Modify
            Keywords', the document is locked by Records Management or Medical records, 
            or the Database is not licensed for EDM Services.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response when the resource does not exist or or the user does not
            have rights to the document.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for keyword groups for a document.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - document keywords
      parameters:
        - $ref: '#/components/parameters/documentId'
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
        - $ref: '#/components/parameters/Accept-Language'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /documents/{documentId}/revisions:
    get:
      summary: |-
        Gets a collection of document revisions.
      description: |-
        Gets collection of document revisions.
      tags:
        - document revisions
      parameters:
        - $ref: '#/components/parameters/documentId'
      responses:
        200:
          description: |-
            OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionCollection'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        403:
          description: |-
            Response when the user does not have the document privilege `View
            Revisions`
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response when the resource does not exist or the user does not have
            rights to the specified document type.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    post:
      summary: Upload revision
      description: |-
        Archives the document as a latest revision to the current document.
      tags:
        - document revisions
      parameters:
        - $ref: '#/components/parameters/documentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevisionArchiveProperties'
      responses:
        201:
          description: |-
            Revision successfully archived.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionsPostResponse'
          headers:
             location:
              $ref: '#/components/headers/location'
        400:
          description: |-
            A reference to an uploaded file resource is not found,
            invalid File Type Id is provided, 
            or the document type is not revisable
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
           application/problem+json:
            schema:
              $ref: '#/components/schemas/Problem-Detail'
        403:
          description: |-
            User does not have rights to create revisions, 
            the document is locked by Records Management or Medical records, 
            or the Database is not licensed for EDM Services.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description:
            Could not find the document.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for revisions metadata.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - document revisions
      parameters:
        - $ref: '#/components/parameters/documentId'
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /documents/{documentId}/revisions/{revisionId}:
    get:
      summary: |-
        Gets the metadata for a revision.
      description: |-
        Gets the metadata for a revision.
        Use 'latest' to retrieve the most recent revision.
      tags:
        - document revisions
      parameters:
        - $ref: '#/components/parameters/documentId'
        - $ref: '#/components/parameters/revisionId'
      responses:
        200:
          description: |-
            OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Revision'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response when the resource does not exist or the user does not have
            rights to the specified document type.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for revisions metadata.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - document revisions
      parameters:
        - $ref: '#/components/parameters/documentId'
        - $ref: '#/components/parameters/revisionId'
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /documents/{documentId}/revisions/{revisionId}/renditions:
    get:
      summary: |-
        Gets a collection of document renditions.
      description: |-
        Gets a collection of document renditions.
        Use 'latest' to retrieve the most recent revision.
      tags:
        - document renditions
      parameters:
        - $ref: '#/components/parameters/documentId'
        - $ref: '#/components/parameters/revisionId'
      responses:
        200:
          description: |-
            OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionCollection'
        400:
          description: |-
            Response for when a bad request is provided.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response when the resource does not exist or the user does not have
            rights to the specified document type.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for revisions metadata.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - document renditions
      parameters:
        - $ref: '#/components/parameters/documentId'
        - $ref: '#/components/parameters/revisionId'
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /documents/{documentId}/revisions/latest/renditions:
    post:
      summary: Upload rendition to the latest revision
      description: |-
        Archives the document as a rendition to the latest revision. 
      tags:
        - document renditions
      parameters:
        - $ref: '#/components/parameters/documentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenditionArchiveProperties'
      responses:
        201:
          description: |-
            Document successfully archived as rendition to the given revision.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionsPostResponse'
          headers:
             location:
              $ref: '#/components/headers/location'
        400:
          description: |-
            A reference to the uploaded file resource is not found,
            an invalid File Type Id is provided, 
            the document already contains a rendition of the given File Type Id, 
            or the document type is not renditionable.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
           application/problem+json:
            schema:
              $ref: '#/components/schemas/Problem-Detail'
        403:
          description: |-
            User does not have rights to create document, 
            or the document is locked by Records Management or Medical Records.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'  
        404:
          description:
            Could not find the document or the revision.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for uploading renditions.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - document renditions
      parameters:
        - $ref: '#/components/parameters/documentId'
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /documents/{documentId}/revisions/{revisionId}/renditions/{fileTypeId}:
    get:
      summary: |-
        Gets the metadata for a rendition of a revision.
      description: |-
        Gets the metadata for a rendition of a revision.
        Use 'latest' to retrieve the most recent revision.
        Use 'default' to retrieve the default rendition.
      tags:
        - document renditions
      parameters:
        - $ref: '#/components/parameters/documentId'
        - $ref: '#/components/parameters/revisionId'
        - $ref: '#/components/parameters/fileTypeId'
      responses:
        200:
          description: |-
            OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rendition'
        400:
          description: |-
            Response for when a bad request is provided.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response when the revision or rendition does not exist or the user does not have
            rights to the specified document type.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for revisions metadata.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - document renditions
      parameters:
        - $ref: '#/components/parameters/documentId'
        - $ref: '#/components/parameters/revisionId'
        - $ref: '#/components/parameters/fileTypeId'
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /documents/{documentId}/revisions/{revisionId}/renditions/{fileTypeId}/content:
    get:
      summary: |-
        Get document content for a rendition of a revision.
      description: |-
        To retrieve the default rendition of the latest revisions, 
        use 'default' for the fileTypeId and 'latest' for the revisionId.

        Consumers can `GET` the content resource by supplying the required
        parameters.  A response will be returned
        based on the result of Content Negotiation.

        Entire document content is returned as a single file with a 
        200 OK Status code if the `pages` query parameter is omitted. 
        The `pages` query parameter can be used to retrieve a single page of the document.

        Content will be returned at it's natural size.

      operationId: GetContentForDocumentAndRevisionAndRendition
      tags:
        - document content
      parameters:
        - $ref: '#/components/parameters/documentId'
        - $ref: '#/components/parameters/revisionId'
        - $ref: '#/components/parameters/fileTypeId'
        - $ref: '#/components/parameters/pages'
        - $ref: '#/components/parameters/Accept'
      responses:
        200:
          description: |-
            Response containing document content.
          headers:
            Hyland-Item-Count:
              $ref: '#/components/headers/Hyland-Item-Count'
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Binary-Content'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
              example: |-
                {
                  "type": "https://example.net/unauthorized",
                  "title": "Unauthorized",
                  "status": 401,
                  "detail": "The requested resource requires authorization.",
                  "instance": "/content"
                }
        404:
          description: |-
            Response for content when the document does not exist,
            a requested page does not exist,
            or the user does not have rights to access.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
              example: |-
                {
                  "type": "https://example.net/notfound",
                  "title": "Resource not found",
                  "status": 404,
                  "detail": "The requested resource does not exist.",
                  "instance": "/content"
                }
        406:
          description: |-
            Response for when a response matching the list of acceptable values
            defined in `Accept` cannot be served.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
              example: |-
                {
                  "type": "https://example.net/notacceptable",
                  "title": "Not Acceptable",
                  "status": 406,
                  "detail": "The content cannot be returned as 'image/png'.",
                  "instance": "/content"
                }
    head:
      summary: |-
        Preview document content.
      description: |-
        Consumers can make a `HEAD` request to see the response
        headers without the response body. This allows previewing
        the result of Content Negotiation with Content-Type,
        and Hyland-Item-Count headers.
      operationId: HeadContentForDocumentAndRevisionAndRendition
      tags:
        - document content
      parameters:
        - $ref: '#/components/parameters/documentId'
        - $ref: '#/components/parameters/revisionId'
        - $ref: '#/components/parameters/fileTypeId'
        - $ref: '#/components/parameters/pages'
        - $ref: '#/components/parameters/Accept'
      responses:
        200:
          description: |-
            Preview the result of the document content.
          headers:
            Hyland-Item-Count:
              $ref: '#/components/headers/Hyland-Item-Count'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response for content when the document does not exist,
            a requested page does not exist,
            or the user does not have rights to access.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        406:
          description: |-
            Response for when a response matching the list of acceptable values
            defined in `Accept` cannot be served.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for content.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      operationId: OptionsContentForDocumentAndRevisionAndRendition
      tags:
        - document content
      parameters:
        - $ref: '#/components/parameters/documentId'
        - $ref: '#/components/parameters/revisionId'
        - $ref: '#/components/parameters/fileTypeId'
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /documents/queries:
    post:
      summary: |-
        Submits a document query, with the provided search constraints.
      description: |-
        Submits a document query, with the provided search constraints.

        If `Hyland-Include-Item-Count` header is set to true, the estimated number
        of documents that will be returned by the query will be included on the
        response in the `Hyland-Item-Count` header. 
        Estimated because the number may vary in accuracy based on how the
        query is formed, any filtering that takes places after the query is run, and
        if there are any external constraints.
      parameters:
        - $ref: '#/components/parameters/Hyland-Include-Item-Count'
      tags:
        - document retrieval
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryInformation'
      responses:
        201:
          description: |-
            Query created. The location of the results of the query results
            is given in the Location header.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueriesPostResponse'
          headers:
            Location:
              $ref: '#/components/headers/Location'
            Hyland-Item-Count:
              $ref: '#/components/headers/Hyland-Item-Count'
        400:
          description: |-
            Response for when a bad request is provided.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for querying for documents.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - document retrieval
      parameters:
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /documents/queries/{queryId}/results:
    get:
      summary: |-
        Returns the documents results of a query.
      description: |-
        Returns the documents results of a query.
      tags:
        - document retrieval
      parameters:
        - $ref: '#/components/parameters/queryId'
      responses:
        200:
          description: |-
            OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResults'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response for when the requested query results are not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for returning the results of a query.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - document retrieval
      parameters:
        - $ref: '#/components/parameters/queryId'
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /documents/queries/{queryId}/columns:
    get:
      summary: |-
        Returns the display column configuration of a query.
      description: |-
        Returns the display column configuration of a query.
      tags:
        - document retrieval
      parameters:
        - $ref: '#/components/parameters/queryId'
      responses:
        200:
          description: |-
            OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisplayColumnConfigurationCollection'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        404:
          description: |-
            Response for when the query display column
            configurations are not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for returning the display column configurations of a query.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - document retrieval
      parameters:
        - $ref: '#/components/parameters/queryId'
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /documents/uploads:
    post:
      summary: |-
        Prepare the staging area to start the upload process.
      description: |-
        Prepares the staging area to start the upload.
        Returns a reference to the file being uploaded.
      tags:
        - file upload
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadFileMetaData'
      responses:
        201:
          description: |-
            Upload staging area created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadsPostResponse'
          headers:
            location:
              $ref: '#/components/headers/location'
        400:
          description: Invalid file metadata such as non-existent 
            extension, negative size.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
           application/problem+json:
            schema:
              $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for staging the upload process.
      description: |-
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - file upload
      parameters:
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
  /documents/uploads/{uploadId}:
    put:
      summary: |-
        Upload file data.
      description: |-
        Upload file to a location identified by the unique file reference.
        This end-point can be called multiple times, to upload multiple files.
        Each file will have it's own unique reference.
        When uploading a single file as chunks, upload it to the same file reference.
      tags:
        - file upload
      parameters:
        - $ref: '#/components/parameters/uploadId'
        - $ref: '#/components/parameters/filePart'
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/Binary-Content'
      responses:
        204:
          description: Uploaded part has been successfully stored.
        400:
          description: File part number is provided in incorrect format
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
           application/problem+json:
            schema:
              $ref: '#/components/schemas/Problem-Detail'
        404:
          description: If the given file reference could not be found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    delete:
      summary: |-
        Delete file corresponding to the given uploadId
      description: |-
        Deletes an uploaded file corresponding to the given uploadId.
        This can be used to cancel the upload.
      tags:
        - file upload
      parameters:
        - $ref: '#/components/parameters/uploadId'
      responses:
        204:
          description: File has been deleted.
        401:
          description: |-
            Response when the user does not supply valid authorization credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem-Detail'
    options:
      summary: |-
        Options for uploading file data.
      description:
        The `OPTIONS` method is available to support `CORS` preflight requests.
      tags:
        - file upload
      parameters:
        - $ref: '#/components/parameters/Origin'
        - $ref: '#/components/parameters/Access-Control-Request-Method'
        - $ref: '#/components/parameters/Access-Control-Request-Headers'
        - $ref: '#/components/parameters/uploadId'
        - $ref: '#/components/parameters/filePart'
      responses:
        200:
          $ref: '#/components/responses/OPTIONS-CORS-200'
        400:
          $ref: '#/components/responses/OPTIONS-CORS-400'
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
  schemas:
    FileTypeCollection:
      description: |-
        An array of file types.
      properties:
        items:
          description: |-
            An array of file types.
          type: array
          items:
            $ref: '#/components/schemas/FileType'
    FileType:
      description: |-
        File type metadata.
      properties:
        id:
          description: |-
            The unique identifier of the file type.
          type: string
        name:
          description: |-
            The localized name of the file type.
          type: string
        systemName:
          description: |-
            The untranslated system name of the file type.
            Localization is controlled by the Accept-Language header and
            the language of the response is represented by the Content-Language
            header.
          type: string
    KeywordTypeGroupCollectionModel:
      description: |-
        A representation of keyword type information for a document type
      properties:
        keywordOptions:
          $ref: '#/components/schemas/KeywordOptions'
        items:
          description: |-
            An array of keyword types grouped by the keyword type group they belong to.
          type: array
          items:
            $ref: '#/components/schemas/KeywordTypeGroup'
    KeywordOptions:
      description: |-
        A group containing keyword type options in relation to the document type
        they belong to.
      properties:
        requiredForArchivalKeywordTypeIds:
          description: |-
            An array of required keyword type ids for a document to be stored.
          type: array
          items:
            type: string
        requiredForRetrievalKeywordTypeIds:
          description: |-
            An array of required keyword type ids for a document to be retrieved.
          type: array
          items:
            type: string
        hiddenKeywordTypeIds:
          description: |-
            An array of hidden keyword type ids for a document type.
          type: array
          items:
            type: string
        readOnlyKeywordTypeIds:
          description: |-
            An array of read only keyword type ids for a document type.
          type: array
          items:
            type: string
    KeywordTypeGroup:
      description: |-
        Keyword type group metadata.
      properties:
        id:
          type: string
          description: |-
            The unique identifier of the keyword type group.  Omitted id indicates Standalone Keyword Group.
        keywordTypes:
          description: |-
            An array of keyword types.  Keyword Types will be omitted if part of a Keyword Type Group.
          type: array
          items:
            $ref: '#/components/schemas/KeywordType'
    KeywordType:
      description: |-
        Keyword type metadata.
      properties:
        id:
          description: |-
            The unique identifier of the keyword type.
          type: string
      required:
        - id
    QueryInformation:
      description: |-
        Represents the information required to execute a query.
      type: object
      properties:
        queryType:
          description: |-
            An array of query types.
          type: array
          items:
            $ref: '#/components/schemas/QueryType'
        maxResults:
          description: |-
            Limits the number of results that the execution of
            a query can create.
          type: integer
        queryKeywordCollection:
          description: |-
            An array of keywords used to execute a query.
          type: array
          items:
            $ref: '#/components/schemas/QueryKeyword'
        documentDateRangeCollection:
          description: |-
            An array of date ranges used to execute a query.
          type: array
          items:
            $ref: '#/components/schemas/DateRange'
        userDisplayColumns:
          description: |-
            An array of user defined display columns. If the
            query already has display columns defined, the predefined
            display columns will be ignored and the user defined
            display columns will be used.
          type: array
          items:
            $ref: '#/components/schemas/UserDefinedDisplayColumn'
    QueryType:
      type: object
      required:
      - type
      - ids
      description: |-
        Represents the type of query to execute.
      properties:
        type:
          description: |-
            The type of query to execute. Currently,
            only custom query will be supported. Eventually
            this would include document type, document type group, etc.
          type: string
          enum:
            - CustomQuery
            - DocumentType
            - DocumentTypeGroup
        ids:
          description: |-
            An array of ids for the query
          type: array
          items:
            type: string
    QueryKeyword:
      type: object
      required:
      - typeId
      - value
      description: |-
        Represents a keyword required to execute a query.
      properties:
        typeId:
          description: |-
            The keyword type Id for the keyword.
          type: string
        value:
          description: |-
            The keyword value.
          type: string
        operator:
          description: |-
            Represents the operator for the keyword value of
            this query keyword. Defaults to Equal if not present.
          type: string
          enum:
            - Equal
            - LessThan
            - GreaterThan
            - LessThanEqual
            - GreaterThanEqual
            - NotEqual
            - Literal
        relation:
          description: |-
            Represents the relation of this query keyword to
            other query keywords. Defaults to And if not present.
          type: string
          enum:
            - And
            - Or
            - To
    UserDefinedDisplayColumn:
      type: object
      description: |-
        Represents a DisplayColumn that the user has defined for this query.
      properties:
        keywordTypeId:
          description: |-
            The keyword type Id for the DisplayColumn. If the
            DisplayColumn is not of type Keyword, this property can be
            omitted and only the displayColumnType is required.
          type: string
        displayColumnType:
          description: |-
            The DisplayColumnType for the DisplayColumn.
          type: string
          enum:
            - Keyword
            - DocumentId
            - DocumentName
            - DocumentTypeId
            - DocumentDate
            - ArchivalDate
            - Institution
            - AuthorId
            - Batch
            - RevisionCount
            - DocumentTypeGroup
            - DocumentTypeName
            - AuthorName
            - NoteContents
            - NoteCount
            - NoteTypeName
            - WorkflowQueue
            - ArrivalTime
            - FullTextScore
            - FullTextFileTypeName
            - FullTextSummary
    CustomQuery:
      description: |-
        Custom query metadata
      properties:
        id:
          description: |-
            The unique identifier of the custom query.
          type: string
        name:
          description: |-
            The localized name of the custom query object
          type: string
        systemName:
          description: |-
            The untranslated system name of the custom query.
            Localization is controlled by the Accept-Language header and
            the language of the response is represented by the Content-Language
            header.
          type: string
        instructions:
          description: |-
            Information describing the usage and/or purpose of the custom query
          type: string
        queryType:
          description: |-
            The type of this custom query.

            `DocumentType` is a query configured to limit the results to preselected document type(s).

            `DocumentTypeGroup` is a query configured to limit the results to preselected document type group(s).

            `Keyword` is a query configured to limit the results to preselected keyword type(s).

            `FolderType` is a query configured to limit the results to preselected folder type(s).

            `SQL` is a query configured with a SQL statement.

            `FullText` is a query configured to allow the querying of the document content directly.
          type: string
          enum:
           - DocumentType
           - Keyword
           - DocumentTypeGroup
           - FolderType
           - SQL
           - FullText
    CustomQueryCollection:
      description: |-
        An array of custom queries.
      properties:
        items:
          description: |-
            An array of custom queries.
          type: array
          items:
            $ref: '#/components/schemas/CustomQuery'
    CustomQueryKeywordTypeCollection:
      description: |-
        A lightweight array of keyword types for custom queries.
      properties:
        items:
          description: |-
            An array of keyword type identifiers.
          type: array
          items:
            $ref: '#/components/schemas/CustomQueryKeywordType'
    CustomQueryKeywordType:
      description: |-
        Keyword type identifier
      properties:
        id:
          description: |-
            The unique identifier of the keyword type
          type: string
    DateRange:
      description: |-
        Represents a range of dates.
      properties:
        start:
          description: |-
            The starting date of the date range.
            If no start date is present, a default minimum date will be used.
          type: string
        end:
          description: |-
            The ending date of the date range.
            If no end date is present, a default maximum date will be used.
          type: string
    QueriesPostResponse:
      description: |-
        Query handle information corresponding to a query.
      type: object
      properties:
        id:
          description: Unique handle for the query
          type: string
    QueryResults:
      description: |-
        Represents the result of a query
      properties:
        items:
          description: |-
            An array of Documents returned from executing a query.
          type: array
          items:
            $ref: '#/components/schemas/DocumentResult'
    DocumentResult:
      description: |-
        Document metadata.
      properties:
        id:
          description: |-
            The unique identifier of the document.
          type: string
        displayColumns:
          description: |-
            An array of Display columns returned from executing a query.
          type: array
          items:
            $ref: '#/components/schemas/DisplayColumn'
    DisplayColumn:
      description: |-
        Display column values.
      properties:
        index:
          description: |-
            Index representing the Display column configuration
            associated with this Display column.
          type: integer
        values:
          description: |-
            An array of values for the Display Column.
          type: array
          items:
            type: string
    DisplayColumnConfigurationCollection:
      description: |-
        Represents a collection of configurations of
        a Display Column.
      properties:
        items:
          description: |-
            An array of Display Column Configurations returned from executing a query.
          type: array
          items:
            $ref: '#/components/schemas/DisplayColumnConfiguration'
    DisplayColumnConfiguration:
      description: |-
        Represents the configuration of a Display Column.
      properties:
        index:
          description: |-
            Index representing the Display column configuration
            associated with this Display column.
          type: integer
        type:
          description: |-
            Describes the type of Display Column.
          type: string
          enum:
            - Keyword
            - DocumentId
            - DocumentName
            - DocumentTypeId
            - DocumentDate
            - ArchivalDate
            - Institution
            - AuthorId
            - Batch
            - RevisionCount
            - DocumentTypeGroup
            - DocumentTypeName
            - AuthorName
            - NoteContents
            - NoteCount
            - NoteTypeName
            - WorkflowQueue
            - ArrivalTime
            - FullTextScore
            - FullTextFileTypeName
            - FullTextSummary
        heading:
          description: |-
            The Header value for the Display Column.
          type: string
        keywordTypeId:
          description: |-
            The Keyword Type associated with the Display Column.
            Only necessary if the Display Column Type is "Keyword".
          type: string
        dataType:
          description: |-
            The Data Type of the value of the display column.
            This is only necessary if the Display Column Type
            is not "Keyword". For Keyword Display Columns,
            data type can be retrieved from the Keyword Type.
          type: string
          enum:
            - Numeric9
            - Numeric20
            - Alphanumeric
            - Currency
            - SpecificCurrency
            - Date
            - DateTime
            - FloatingPoint
    Keyword:
      description: |-
        A keyword value and information about the related keyword type.
      properties:
        typeId:
          description: |-
            The unique identifier of the keyword type for this keyword value.
          type: string
        value:
          description: |-

            The keyword value. Keyword values are represented as strings.
            Depending on the underlying keyword type datatype, the specific
            format of the underlying string adheres to the following formatting
            rules.

            Values are normalized and locale specific formatting is not applied.
            Formatting to a specific currency is not applied. Consumers can
            apply this formatting through libraries and client locale
            preferences. Determining data type or currency format
            is retrieved from other metadata resources.

            <table>
              <tr>
                <th>Data Type</th> <th>Format</th> <th>Example</th>
              </tr> <tr>
                <td>Numeric9</td> <td>A whole positive number up to 9 digits, or
                negative number up to 8 digits without commas.</td>
                <td>123456789 <br /> -12345678</td>
              </tr> <tr>
                <td>Numeric20</td> <td>A whole number up to 20 digits without
                commas, or a negative number with 19 digits without commas.</td>
                <td>12345678901234567890 <br /> -1234567890123456789</td>
              </tr> <tr>
                <td>Alphanumeric</td> <td>A string value.</td> <td>ABC 123</td>
              </tr> <tr>
                <td>Currency</td> <td>Positive or negative numeric value with a
                whole number and decimal portion separated by a period.</td>
                <td>123456.00</td>
              </tr> <tr>
                <td>SpecificCurrency</td> <td>Positive or negative numeric value
                with a whole number and decimal portion separated by a
                period.</td> <td>123456.00</td>
              </tr> <tr>
                <td>Date</td> <td><a
                href="https://en.wikipedia.org/wiki/ISO_8601">ISO-8601
                Date</a></td> <td>2018-02-21</td>
              </tr> <tr>
                <td>DateTime</td> <td><a
                href="https://en.wikipedia.org/wiki/ISO_8601">ISO-8601 Date and
                time without time zone.</td> <td>2018-02-21T21:17:28</td>
              </tr> <tr>
                <td>FloatingPoint</td> <td>Positive or negative numeric value
                with a whole number and decimal portion separated by a
                period.</td> <td>123456.091231</td>
              </tr>
            </table>

          type: string
    KeywordGroup:
      description: |-
        A group of keyword values.
      properties:
        typeGroupId:
          description: |-
            The keyword type group identifier. This field will be omitted when
            not associated with a `SingleInstance` or `MultiInstance` type
            group.
          type: string
        groupId:
          description: |-
            The identifier for the group of keywords. This field will be omitted
            when not associated with a `MultiInstance` type group.
          type: string
        keywords:
          description: |-
            An array of keywords in the group.
          type: array
          items:
            $ref: '#/components/schemas/Keyword'
      required:
        - keywords
    NewKeywordGroup:
      description: |-
        A group of keyword values.
      properties:
        typeGroupId:
          description: |-
            The keyword type group identifier. This field will be omitted when
            not associated with a `SingleInstance` or `MultiInstance` type
            group.
          type: string
        keywords:
          description: |-
            An array of keywords in the group.
          type: array
          items:
            $ref: '#/components/schemas/Keyword'
      required:
        - keywords
    KeywordCollection:
      description: |-
        Instance data for keywords on a document
      properties:
        keywordHash:
          description: |-
            Hash string to ensure integrity of restricted keyword values.
          type: string
        items:
          description: |-
            An array of keywords grouped by the keyword group they belong to.
          type: array
          items:
            $ref: '#/components/schemas/KeywordGroup'
    KeywordCollectionPutRequest:
      description: |-
        Instance data for keywords on a document
      properties:
        keywordHash:
          description: |-
            Hash string to ensure integrity of restricted keyword values.
          type: string
        keywordCollection:
          description: |-
            An array of keywords grouped by the keyword group they belong to.
          type: array
          items:
            $ref: '#/components/schemas/KeywordGroup'
      required:
        - keywordHash
        - keywordCollection
    Document:
      description: |-
        Document metadata.
      properties:
        id: 
          description: |-
            The unique identifier of the document.
          type: string
        typeId:
          description: |-
            The unique identifier of the document type for this document.
          type: string
        name:
          description: |-
            The auto name string for this document.
          type: string
        createdByUserId:
          description: |-
            The unique identifier of the user that created this document.
          type: string
        storedDate:
          description: |-
            The date/time this document was stored.
            <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO-8601 Date and
                time without time zone.
          type: string
          example: '2018-02-21T21:17:28'
        documentDate:
          description: |-
            The document date.
          type: string
          format: date
          example: '2018-02-21'
        status:
          description: |-
            The document status of Active, Deleted or Unindexed.
          type: string
          enum:
            - Active
            - Deleted
            - Unindexed
    DocumentsPostResponse:
      description: |-
        Document handle information corresponding to a document.
      type: object
      properties:
        id:
          description: Unique handle for the document
          type: string
    RevisionsPostResponse:
      description: |-
        Id of the newly created revision.
      properties:
        revisionId:
          description:
            Latest revision Id.
          type: string
    RenditionsPostResponse:
      description: |-
        Id of the newly created rendition, which is the File Type Id.
      properties:
        fileTypeId:
          description:
            File Type Id.
          type: string
    DocumentType:
      description: |-
        Document Type metadata.
      properties:
        id:
          description: |-
            The unique identifier of the document type.
          type: string
        name:
          description: |-
            The localized name of the document type.
          type: string
        systemName:
          description: |-
            The untranslated system name of the document type.
            Localization is controlled by the Accept-Language header and
            the language of the response is represented by the Content-Language
            header.
          type: string
        defaultFileTypeId:
          description: |-
            The unique identifier of the default file format for the document type
          type: string
        documentDateDisplayName:
          description: |-
            The document date display name setting for the document type
          type: string
        revisable:
          description: |-
            Indicates if the document type is revisable
          type: boolean
        renditionable:
          description: |-
            Indicates if the document is renditionable
          type: boolean
        autofillKeywordSetId:
          description: |-
            The Id of the autofill keyset associated with this document type, if any.
          type: string
        documentTypeGroupId:
          description: |-
            The id of the document type group the document type is assigned to.
          type: string
    DocumentTypeCollection:
      description: |-
        An array of document types.
      properties:
        items:
          description: |-
            An array of document types.
          type: array
          items:
            $ref: '#/components/schemas/DocumentType'
    DocumentTypeGroup:
      description: |-
        Document Type Group metadata
      properties:
        id:
          description: |-
            The unique identifier of the document type group.
          type: string
        name:
          description: |-
            The localized name of the document type group.
          type: string
        systemName:
          description: |-
            The untranslated system name of the document type group. 
            Localization is controlled by the Accept-Language header and 
            the language of the response is represented by the Content-Language
            header.
          type: string
    DocumentTypeGroupCollection:
      description: |-
        An array of document type groups.
      properties:
        items:
          description: |-
            An array of document type groups
          type: array
          items:
            $ref: '#/components/schemas/DocumentTypeGroup'
    DocumentTypeGroupDocumentType:
      description: |-
        Document type identifier
      properties:
        id:
          description: |-
            The unique identifier of the document type
          type: string
    DocumentTypeGroupDocumentTypeCollection:
      description: |-
        A lightweight array of document types associated with a document type group
      properties:
        items:
          description: |-
            An array of document type identifiers.
          type: array
          items:
            $ref: '#/components/schemas/DocumentTypeGroupDocumentType'
    DocumentArchiveProperties:
      description: |-
        Meta-data information required to upload documents
      properties:
        documentTypeId:
          description: |-
            The Id of the document type to store the document into
          type: string
        fileTypeId:
          description: |-
            Id of the file Type for the document.
          type: string
        documentDate:
          description: Document's date
          type: string
          format: date
          example: 2018-08-21
        uploads:
          description: |-
              List of references to uploaded files. The order of uploaded file references will be used for the document page order.
          type: array
          items:
            $ref: '#/components/schemas/Upload'
        keywordCollection:
          description: |-
            An array of keywords grouped by the keyword group they belong to.
          type: array
          items:
            $ref: '#/components/schemas/NewKeywordGroup'
      required:
        - documentTypeId
        - uploads
    RevisionArchiveProperties:
      description: |-
        Meta-data information required to upload revision
      properties:
        comment:
          description: |-
            Comment for the revision
          type: string
        fileTypeId:
          description: |-
            Id of the File Type for the document. If File Type Id is not provided, Document Type's default File Type will be used.
          type: string
        uploads:
          description: |-
              List of references to uploaded files. The order of uploaded file references will be used for the document page order.
          type: array
          items:
            $ref: '#/components/schemas/Upload'
      required:
        - uploads
    Upload:
      description: |-
        Reference to an uploaded file.
      type: object
      properties:
        id:
          description: Unique file reference
          type: string
    RenditionArchiveProperties:
      description: |-
        Meta-data information required to upload rendition
      properties:
        comment:
          description: |-
            Comment for the rendition
          type: string
        fileTypeId:
          description: |-
            Id of the File Type for the document. If a File Type Id is not provided, then the Document Type's default File Type ID will be used. If the revision already contains the File Type Id then 400 Bad Request will be returned. 
          type: string
        uploads:
          description: |-
              List of references to uploaded files. The order of uploaded file references will be used for the document page order.
          type: array
          items:
            $ref: '#/components/schemas/Upload'
      required:
        - uploads
    UploadsPostResponse:
      description: |-
        Unique file reference corresponding to the uploaded file.
      type: object
      properties:
        id:
          description: Unique reference for the uploaded file
          type: string
    UploadFileMetaData:
      description: |-
        Meta-data information about the file being uploaded.
      properties:
        fileExtension:
          description: |-
            Extension of the file being uploaded. The extension does not need a leading period `.`
          type: string
        fileSize:
          description: |-
            Size of the file in bytes.
          type: string
          format: int32
        filePartSize:
          description: |-
            Size of each file part being uploaded in bytes.
            filePartSize can be less than, greater than or equal to the fileSize, but the size of all the parts being uploaded should be the same except the last one which can be either less than or equal to the other parts.
            Recommended maximum size of a file part to be uploaded per request is 5MB.
          type: string
          format: int32
      required:
        - fileExtension
        - fileSize
        - filePartSize
    Revision:
      description: |-
        "Revision metadata"
      properties:
        id:
          description: |-
            The unique identifier of the revision.
          type: string
    RevisionCollection:
      description: |-
        An Array of revisions.
      properties:
        items:
          description: |-
            The unique identifier of the revisions.
          type: array
          items:
            $ref: '#/components/schemas/Revision'
    Rendition:
      description: |-
        "Rendition metadata"
      properties:
        fileTypeId:
          description: |-
            The unique identifier of the rendition.
          type: string
        created:
          description: |-
            The date the rendition was stored.
          type: string
        pageCount:
          description: |-
            The number of pages in the rendition.
          type: string
        createdByUserId:
          description: |-
            The user ID of the revision creator.
          type: string
        comment:
          description: |-
            A comment for the revision.
          type: string
    RenditionCollection:
      description: |-
        An Array of renditions.
      properties:
        items:
          description: |-
            An array of Renditions
          type: array
          items:
            $ref: '#/components/schemas/Rendition'
    Problem-Detail:
      type: object
      description: |-
        The <a href="https://tools.ietf.org/html/rfc7807">Problem Detail</a>
        format defines a way to carry machine-readable details of errors in a
        HTTP response to avoid the need to define new error response formats for
        HTTP APIs.

        Problem details can be extended and defined for specific
        problem types.
      properties:
        type:
          type: string
          format: uri
          description: |-
            An absolute URI that identifies the problem type.  When
            dereferenced, it should provide human-readable documentation
            for the problem type (e.g., using HTML).
          example: https://example.net/validation_error
        title:
          type: string
          description: |-
            A short, human-readable summary of the problem type. It should
            not change from occurrence to occurrence of the problem.
          example: Your request parameters didn't validate.
        status:
          type: integer
          format: int32
          description: |-
            The HTTP status code generated by the origin server for this
            occurrence of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 400
        detail:
          type: string
          description: |-
            A human readable explanation specific to this occurrence of the
            problem.
          example: The parameter `count` was not valid for the request.
        instance:
          type: string
          format: uri
          description: |-
            A URI reference that identifies the specific occurrence of
            the problem.  It may or may not yield further information
            if dereferenced.
          example: /example-resource
    Binary-Content:
      description: |-
        Binary content in the request or response for file uploads and downloads.
      type: string
      format: binary
  parameters:
    documentTypeId:
      description: |-
        The unique identifier of a document type.
      name: documentTypeId
      in: path
      required: true
      schema:
        type: string
    documentTypeGroupId:
      description: |-
        The unique identifier of a document type group
      name: documentTypeGroupId
      in: path
      required: true
      schema:
        type: string
    documentId:
      name: documentId
      in: path
      description: |-
        The unique identifier of a document.
      required: true
      schema:
        type: string
    queryId:
      name: queryId
      in: path
      description: |-
        The unique identifier of a query.
      required: true
      schema:
        type: string
    customQueryId:
      name: customQueryId
      in: path
      description: |-
        The unique identifier of a custom query.
      required: true
      schema:
        type: string
    fileTypeId:
      description: |-
        The unique identifier of a file type.
      name: fileTypeId
      in: path
      required: true
      schema:
        type: string
    pages:
      description: |-
        The page to be retrieved. Currently only a single 
        page number is supported. If the page number does 
        not exist or the value provided is not a single 
        page number, a 404 Not Found will be returned. 
        Page number is one-based.
      name: pages
      in: query
      required: false
      schema:
        type: string
    uploadId:
      name: uploadId
      in: path
      description: |-
        The unique reference to the file being uploaded
      required: true
      schema:
        type: string
    filePart:
      name: filePart
      in: query
      required: true
      description: part number of the file to upload. Part numbers are sequential and start at 1.
      schema:
        type: string
        format: Int32
    revisionId:
      description: |-
        The unique identifier of a document revision.
      name: revisionId
      in: path
      required: true
      schema:
        type: string
    Accept:
      name: Accept
      in: header
      description: |-
        The <a
        href="https://tools.ietf.org/html/rfc7231#section-5.3.2">Accept</a>
        header field can be used by consumers to specify response media types
        that are preferred.

        Upon recieving this header the server will use <a
        href="https://tools.ietf.org/html/rfc7231#section-3.4.1">Proactive
        Content Negotiation</a> to determine the "best guess" format for the
        consumer.

        In cases where the underlying resource can not be returned as a
        requested format, the server will make a determination of which format
        of the content will be returned.

        In cases where the Accept header is omitted or has the value `*/*`, the
        the server will make a determination of which format of the content will
        be returned.

        Consumers should inspect the `Content-Type` response header to determine
        the actual format of the content returned.
      required: false
      schema:
        type: string
    Accept-Language:
      name: Accept-Language
      in: header
      description: |-
        The <a href="https://tools.ietf.org/html/rfc7231#section-5.3.5">Accept-Language</a>
        header field can be used by user agents to
        indicate the set of natural languages that are preferred in the
        response.  Language tags are defined in RFC 5646. If none of the 
        languages given are supported, a default language will be returned.
      required: false
      schema:
        type: string
      example: 'Accept-Language: en-US'
    Hyland-Include-Item-Count:
      name: Hyland-Include-Item-Count
      in: header
      description: |-
        The Hyland-Include-Item-Count custom header field can be used by user agents 
        to indicate that the item count should be included in the response.   
      required: false
      schema:
        type: boolean
      example: 'Hyland-Include-Item-Count: true'
    Range:
      name: Range
      in: header
      description: |-
        The <a href="https://tools.ietf.org/html/rfc7233#section-3.1">Range</a>
        header field on a request modifies the method semantics to request
        transfer of only one or more subranges of the selected representation
        data, rather than the entire selected representation data.

        The Range unit `parts` is supported to represent multiple files or pages
        of a specific rendition content. As content renditions can span multiple
        pages or parts, supplying a parts range will allow getting a specific
        part.

        The cases where the Ranger header is omitted, the full document will be 
        returned. 

        The Range unit `parts` only supports a value for a single part, such as
        `Range parts=2-2`. Requesting a parts Range for multiple parts such as
        `Range parts=1-5` will return a `416 Range Not Satisfiable` status code.
      required: false
      schema:
        type: string
    Origin:
      name: Origin
      in: header
      description: |-
        The <a href="https://tools.ietf.org/html/rfc6454#section-7">Origin</a>
        request header indicates which origin(s) a request originated from.
        Origin only includes the server name and no path information.
      required: false
      schema:
        type: string
      example: 'Origin: https://example.net'
    Access-Control-Request-Method:
      name: Access-Control-Request-Method
      in: header
      description: |-
        The <a
        href="https://fetch.spec.whatwg.org/#http-access-control-request-method">Access-Control-Request-Method</a>
        request header is used when issuing a `CORS` preflight request to let
        the server know which HTTP method will be used when the actual request
        is made.
      required: false
      schema:
        type: string
      example: 'Access-Control-Request-Method: GET'
    Access-Control-Request-Headers:
      name: Access-Control-Request-Headers
      in: header
      description: |-
        The <a
        href="https://fetch.spec.whatwg.org/#http-access-control-request-headers">Access-Control-Request-Headers</a>
        request header is used when issuing a `CORS` preflight request to let
        the server know which HTTP headers will be used when the actual request
        is made.
      required: false
      schema:
        type: string
      example: 'Access-Control-Request-Headers: Range'
  headers:
    Content-Language:
      description: |-
        The Content-Language header field describes the natural language(s)
        of the intended audience for the representation.  Note that this
        might not be equivalent to all the languages used within the
        representation.

        Reference: https://tools.ietf.org/html/rfc7231#section-3.1.3.2
      schema:
        type: string
    Location:
      description: |-
        The "Location" header field is used in some responses to refer to a
        specific resource in relation to the response.  The type of
        relationship is defined by the combination of request method and
        status code semantics.
        Reference: https://tools.ietf.org/html/rfc7231#section-7.1.2
      schema:
        type: string
    Content-Range:
      description: |-
        The Content-Range header field is sent in a single part 206 (Partial
        Content) response to indicate the partial range of the selected
        representation enclosed as the message payload, sent in each part of a
        multipart 206 response to indicate the range enclosed within each body
        part, and sent in 416 (Range Not Satisfiable) responses to provide
        information about the selected representation.
        Reference: https://tools.ietf.org/html/rfc7233#section-4.2
      schema:
        type: string
    Accept-Ranges:
      description: |-
        The Accept-Ranges header field allows a server to indicate that it
        supports range requests for the target resource.

        Reference: https://tools.ietf.org/html/rfc7233#section-2.3
      schema:
        type: string
    Access-Control-Expose-Headers:
      description: |-
        The Access-Control-Expose-Headers
        response header indicates which headers can be exposed as part of the
        response by listing their names.

        Browsers and libraries that participate in the CORS standards will
        restrict access to non-simple headers.

        Reference: https://fetch.spec.whatwg.org/#http-access-control-expose-headers
      schema:
        type: string
    Access-Control-Allow-Origin:
      description: |-
        The Access-Control-Allow-Origin response header is returned after a
        successful `CORS` preflight request to indicate whether the target
        resource can be shared with the given `Origin`.
        Reference: https://fetch.spec.whatwg.org/#http-access-control-allow-origin
      schema:
        type: string
      example: 'Access-Control-Allow-Origin: https://example.net'
    Access-Control-Max-Age:
      description: |-
        The Access-Control-Max-Age response header indicates how long in seconds
        the results of a `CORS` preflight request can be cached.
        Reference: https://fetch.spec.whatwg.org/#http-access-control-max-age
      schema:
        type: string
      example: 'Access-Control-Max-Age: 600'
    location:
      description: |-
        location to the resource
        Reference: https://tools.ietf.org/html/rfc7231#section-7.1.2
      schema:
        type: string
      example: 'location: /documents/id'
    Hyland-Item-Count:
      description: |-
        The Hyland-Item-Count custom
        response header indicates the total number of items included in a response.
      schema:
        type: string
  responses:
    OPTIONS-CORS-200:
      description: |-
        The `OPTIONS` supplied in the CORS request is allowed.
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Access-Control-Max-Age:
          $ref: '#/components/headers/Access-Control-Max-Age'
    OPTIONS-CORS-400:
      description: |-
        The `OPTIONS` supplied in the CORS request is not allowed.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem-Detail'
          example: |-
            {
              "type": "https://example.net/bad-request",
              "title": "Bad Request",
              "status": 400,
              "detail": "The method 'POST' is not allowed.",
              "instance": "/content"
            }